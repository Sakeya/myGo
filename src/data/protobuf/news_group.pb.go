// Code generated by protoc-gen-go. DO NOT EDIT.
// source: news_group.proto

package entity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 集合数据结构
type NewsGroup struct {
	Id               *int64  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Title            *string `protobuf:"bytes,2,req,name=title" json:"title,omitempty"`
	Content          *string `protobuf:"bytes,3,req,name=content" json:"content,omitempty"`
	Image            *string `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	NewsList         []*News `protobuf:"bytes,5,rep,name=news_list,json=newsList" json:"news_list,omitempty"`
	Kind             *KIND   `protobuf:"varint,6,req,name=kind,enum=entity.KIND" json:"kind,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NewsGroup) Reset() {
	*m = NewsGroup{}
}
func (m *NewsGroup) String() string {
	return proto.CompactTextString(m)
}
func (*NewsGroup) ProtoMessage() {}
func (*NewsGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0}
}

func (m *NewsGroup) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *NewsGroup) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *NewsGroup) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *NewsGroup) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *NewsGroup) GetNewsList() []*News {
	if m != nil {
		return m.NewsList
	}
	return nil
}

func (m *NewsGroup) GetKind() KIND {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return KIND_KIND_NO_IMAGE
}

func init() {
	proto.RegisterType((*NewsGroup)(nil), "entity.NewsGroup")
}

func init() {
	proto.RegisterFile("news_group.proto", fileDescriptor3)
}

var fileDescriptor3 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8e, 0x4d, 0x6a, 0xc3, 0x30,
	0x10, 0x85, 0xb1, 0xfc, 0xd3, 0x7a, 0xda, 0x9a, 0x22, 0xba, 0x10, 0x5e, 0x89, 0xae, 0xd4, 0x8d,
	0x17, 0x3d, 0x43, 0xa1, 0x94, 0x06, 0x2f, 0x74, 0x81, 0x10, 0x6c, 0xc5, 0x0c, 0x71, 0x24, 0x63,
	0x4d, 0x30, 0xb9, 0x54, 0xce, 0x18, 0x24, 0x27, 0x64, 0xf9, 0xbd, 0xf7, 0x0d, 0xf3, 0xe0, 0xdd,
	0x9a, 0xc5, 0x6f, 0x87, 0xd9, 0x9d, 0xa6, 0x66, 0x9a, 0x1d, 0x39, 0x5e, 0x18, 0x4b, 0x48, 0xe7,
	0x1a, 0x42, 0xb3, 0x66, 0xf5, 0x5b, 0xe7, 0xec, 0x1e, 0x87, 0x1b, 0x7e, 0x5e, 0x12, 0x28, 0x5b,
	0xb3, 0xf8, 0xdf, 0x70, 0xc6, 0x2b, 0x60, 0xd8, 0x8b, 0x44, 0x32, 0x95, 0x6a, 0x86, 0x3d, 0xff,
	0x80, 0x9c, 0x90, 0x46, 0x23, 0x98, 0x64, 0xaa, 0xd4, 0x2b, 0x70, 0x01, 0x4f, 0x9d, 0xb3, 0x64,
	0x2c, 0x89, 0x34, 0xe6, 0x77, 0x0c, 0x3e, 0x1e, 0x77, 0x83, 0x11, 0x99, 0x4c, 0x82, 0x1f, 0x81,
	0x7f, 0x41, 0x19, 0xa7, 0x8d, 0xe8, 0x49, 0xe4, 0x32, 0x55, 0x2f, 0xdf, 0xaf, 0xcd, 0x3a, 0xad,
	0x09, 0xbf, 0xf5, 0x73, 0xa8, 0x37, 0xe8, 0x89, 0x4b, 0xc8, 0x0e, 0x68, 0x7b, 0x51, 0x48, 0xa6,
	0xaa, 0x87, 0xf5, 0xff, 0xd7, 0xfe, 0xe8, 0xd8, 0x5c, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x3c,
	0xfc, 0xa4, 0xe6, 0x00, 0x00, 0x00,
}
